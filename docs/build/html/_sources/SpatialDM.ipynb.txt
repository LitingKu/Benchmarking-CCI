{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## **SpatialDM Analysis of CCI**"
      ],
      "metadata": {
        "id": "G_LIKiJb3Bn1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   The SpatialDM documentation and package could be found  here:\n",
        "https://spatialdm.readthedocs.io/en/latest\n",
        "*   The paper could be found here:\n",
        "https://doi.org/10.1038/s41467-023-39608-w"
      ],
      "metadata": {
        "id": "sgVb9aQE2zAq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1. **Import Package**"
      ],
      "metadata": {
        "id": "3gSW2Yio1Ns3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import anndata as ann\n",
        "import scanpy as sc\n",
        "import spatialdm as sdm\n",
        "from spatialdm.datasets import dataset\n",
        "import spatialdm.plottings as pl\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "from itertools import zip_longest"
      ],
      "metadata": {
        "id": "ejT5lHQt1F42"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "PLGNC5dSFf6e"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2. **Getting Ligand-Receptor Database**\n",
        "\n",
        "*   Because I run the code in HPC, and that our HPC are unable to use the `sdm.extract_lr`, I extract this function from the package.\n",
        "*   The L-R database csv files could be found in here: https://github.com/StatBiomed/SpatialDM/tree/main/spatialdm/datasets/LR_data\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "JYbd_3Nr1cW5"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wOlDr0Ee0_Hp"
      },
      "outputs": [],
      "source": [
        "def extract_lr(adata, species, mean='algebra', min_cell=0, datahost='builtin'):\n",
        "    \"\"\"\n",
        "    find overlapping LRs from CellChatDB\n",
        "    :param adata: AnnData object\n",
        "    :param species: support 'human', 'mouse' and 'zebrafish'\n",
        "    :param mean: 'algebra' (default) or 'geometric'\n",
        "    :param min_cell: for each selected pair, the spots expressing ligand or receptor should be larger than the min,\n",
        "    respectively.\n",
        "    :param datahost: the host of the ligand-receptor data. 'builtin' for package built-in otherwise from figshare\n",
        "    :return: ligand, receptor, geneInter (containing comprehensive info from CellChatDB) dataframes \\\n",
        "            in adata.uns\n",
        "    \"\"\"\n",
        "    if mean=='geometric':\n",
        "        from scipy.stats.mstats import gmean\n",
        "    adata.uns['mean'] = mean\n",
        "\n",
        "    if datahost == 'package':\n",
        "        if species in ['mouse', 'human', 'zerafish']:\n",
        "            datapath = './datasets/LR_data/%s-' %(species)\n",
        "        else:\n",
        "            raise ValueError(\"species type: {} is not supported currently. Please have a check.\".format(species))\n",
        "\n",
        "        import pkg_resources\n",
        "        stream1 = pkg_resources.resource_stream(__name__, datapath + 'interaction_input_CellChatDB.csv.gz')\n",
        "        geneInter = pd.read_csv(stream1, index_col=0, compression='gzip')\n",
        "\n",
        "        stream2 = pkg_resources.resource_stream(__name__, datapath + 'complex_input_CellChatDB.csv')\n",
        "        comp = pd.read_csv(stream2, header=0, index_col=0)\n",
        "    else:\n",
        "        if species == 'mouse':\n",
        "            geneInter = pd.read_csv('/rsrch5/home/biostatistics/lku/SpatialDM/mouse_interaction_input_CellChatDB.csv', index_col=0)\n",
        "            comp = pd.read_csv('/rsrch5/home/biostatistics/lku/SpatialDM/mouse_complex_input_CellChatDB', header=0, index_col=0)\n",
        "        elif species == 'human':\n",
        "            geneInter = pd.read_csv('/rsrch5/home/biostatistics/lku/SpatialDM/human_interaction_input_CellChatDB.csv', header=0, index_col=0)\n",
        "            comp = pd.read_csv('/rsrch5/home/biostatistics/lku/SpatialDM/human_complex_input_CellChatDB.csv', header=0, index_col=0)\n",
        "        else:\n",
        "            raise ValueError(\"species type: {} is not supported currently. Please have a check.\".format(species))\n",
        "\n",
        "    geneInter = geneInter.sort_values('annotation')\n",
        "    ligand = geneInter.ligand.values\n",
        "    receptor = geneInter.receptor.values\n",
        "    geneInter.pop('ligand')\n",
        "    geneInter.pop('receptor')\n",
        "\n",
        "    ## NOTE: the following for loop needs speed up\n",
        "    t = []\n",
        "    for i in range(len(ligand)):\n",
        "        for n in [ligand, receptor]:\n",
        "            l = n[i]\n",
        "            if l in comp.index:\n",
        "                n[i] = comp.loc[l].dropna().values[pd.Series \\\n",
        "                    (comp.loc[l].dropna().values).isin(adata.var_names)]\n",
        "            else:\n",
        "                n[i] = pd.Series(l).values[pd.Series(l).isin(adata.var_names)]\n",
        "        if (len(ligand[i]) > 0) * (len(receptor[i]) > 0):\n",
        "            if mean=='geometric':\n",
        "                meanL = gmean(adata[:, ligand[i]].X, axis=1)\n",
        "                meanR = gmean(adata[:, receptor[i]].X, axis=1)\n",
        "            else:\n",
        "                meanL = adata[:, ligand[i]].X.mean(axis=1)\n",
        "                meanR = adata[:, receptor[i]].X.mean(axis=1)\n",
        "            if (sum(meanL > 0) >= min_cell) * \\\n",
        "                    (sum(meanR > 0) >= min_cell):\n",
        "                t.append(True)\n",
        "            else:\n",
        "                t.append(False)\n",
        "        else:\n",
        "            t.append(False)\n",
        "    ind = geneInter[t].index\n",
        "    adata.uns['ligand'] = pd.DataFrame.from_records(zip_longest(*pd.Series(ligand[t]).values)).transpose()\n",
        "    adata.uns['ligand'].columns = ['Ligand' + str(i) for i in range(adata.uns['ligand'].shape[1])]\n",
        "    adata.uns['ligand'].index = ind\n",
        "    adata.uns['receptor'] = pd.DataFrame.from_records(zip_longest(*pd.Series(receptor[t]).values)).transpose()\n",
        "    adata.uns['receptor'].columns = ['Receptor' + str(i) for i in range(adata.uns['receptor'].shape[1])]\n",
        "    adata.uns['receptor'].index = ind\n",
        "    adata.uns['num_pairs'] = len(ind)\n",
        "    adata.uns['geneInter'] = geneInter.loc[ind]\n",
        "    if adata.uns['num_pairs'] == 0:\n",
        "        raise ValueError(\"No effective RL. Please have a check on input count matrix/species.\")\n",
        "    return"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "nkuDBEUiF4mx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3. **Run the Analysis**\n",
        "\n",
        "\n",
        "*   The below shows an example analysis on analyzing spot level data, where I have prepared the data by the following columns: `[\"x\", \"y\", \"celltypeA\",..., \"celltypeX\", \"cell_type(dominant cell type)\", \"GeneA\",..., \"GeneX\"]`.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "8rL-Z9d-2fP3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for num in [\"slice1\",\"slice2\",\"slice3\",\"slice4\"]:\n",
        "  path_exprsn = f'/rsrch5/home/biostatistics/lku/ILIBD/data/{num}/exprsn_df.csv'\n",
        "  data = pd.read_csv(path_exprsn, index_col=0)\n",
        "  data = data.dropna(subset=['cell_type'])\n",
        "  data = data.set_index('cell', drop=False)\n",
        "  data.index.name = None\n",
        "  gene_expression= data.drop(columns=[\"x\",\"y\",\"cell\",\"Excitatory_neurons\",\"Inhibitory_neuron\", \"Astrocyte\", \"Oligodendrocyte\",\"Oligodendrocyte_precursor_cell\",\n",
        "                    \"Microglia\",\"Pericytes\", \"Endothelial_cells\",\"cell_type\" ])\n",
        "  meta_data = data[[\"Excitatory_neurons\",\"Inhibitory_neuron\", \"Astrocyte\", \"Oligodendrocyte\",\"Oligodendrocyte_precursor_cell\",\"Microglia\",\"Pericytes\", \"Endothelial_cells\" ]]\n",
        "  #meta_data.set_index('cell', inplace=True)\n",
        "  adata = sc.AnnData(X=gene_expression, obs=meta_data)\n",
        "  adata.obsm['spatial'] = data[['x', 'y']].to_numpy()\n",
        "\n",
        "  adata.raw = adata.copy()\n",
        "  sc.pp.normalize_total(adata, target_sum=1e4)  # Normalizes each cell to have total count of 10,000\n",
        "  sc.pp.log1p(adata)\n",
        "\n",
        "\n",
        "  sdm.weight_matrix(adata, l=1.2, cutoff=0.2, single_cell=False) # weight_matrix by rbf kernel\n",
        "  # extract LR pairs\n",
        "  extract_lr(adata, 'human', min_cell=3)\n",
        "  # global selection\n",
        "  sdm.spatialdm_global(adata, 1000, specified_ind=None, method='both', nproc=1)     # global Moran selection\n",
        "  sdm.sig_pairs(adata, method='permutation', fdr=True, threshold=0.1)     # select significant pairs # FDR threshold\n",
        "\n",
        "  LR = adata.uns['global_res'].sort_values(by='fdr')\n",
        "  LR_pair = LR.index.tolist()\n",
        "  # local spot selection\n",
        "  sdm.spatialdm_local(adata, n_perm=1000, method='both', specified_ind=None, nproc=1)\n",
        "  sdm.sig_spots(adata, method='permutation', fdr=False, threshold=0.1)\n",
        "  adata.obsm['cell_type'] = adata.obs[adata.obs.columns]\n",
        "\n",
        "  sdm.write_spatialdm_h5ad(adata, filename=f'/rsrch5/home/biostatistics/lku/ILIBD/data/{num}/spatialdm_adata.h5ad')\n",
        "\n",
        "  # Create an empty list to store the Links DataFrames\n",
        "  all_links = []\n",
        "  for pair in LR_pair:\n",
        "    try:\n",
        "        # Compute local_I_R and local_I for the current pair\n",
        "        selected_spots_mask = adata.uns['selected_spots'].index == pair\n",
        "        local_I_R = adata.uns['local_stat']['local_I_R'][:, selected_spots_mask]\n",
        "        local_I = adata.uns['local_stat']['local_I'][:, selected_spots_mask]\n",
        "\n",
        "        # Check if either local_I_R or local_I is empty\n",
        "        if local_I_R.shape[1] == 0 or local_I.shape[1] == 0:\n",
        "            print(f\"Skipping pair {pair}: local_I_R or local_I is empty.\")\n",
        "            continue  # Skip to the next iteration\n",
        "\n",
        "        # Compute ct_R and ct_L\n",
        "        ct_R = local_I_R * adata.obsm['cell_type']\n",
        "        ct_L = local_I * adata.obsm['cell_type']\n",
        "\n",
        "        # Compute sparse_ct_sum\n",
        "        from scipy.sparse import csc_matrix\n",
        "        w = adata.obsp['weight']\n",
        "\n",
        "        sparse_ct_sum = [[\n",
        "            (csc_matrix(w).multiply(ct_L[n1].values).T.multiply(ct_R[n2].values)).sum()\n",
        "            for n1 in ct_L.columns\n",
        "        ] for n2 in ct_R.columns]\n",
        "\n",
        "        sparse_ct_sum = np.array(sparse_ct_sum)\n",
        "\n",
        "        # Create Links DataFrame\n",
        "        Links = pd.DataFrame({\n",
        "            'ligand': np.tile(ct_L.columns, ct_R.shape[1]),\n",
        "            'receptor': np.repeat(ct_R.columns, ct_L.shape[1]),\n",
        "            'value': sparse_ct_sum.reshape(1, -1)[0],\n",
        "            'pvalue': np.zeros(ct_L.shape[1] * ct_R.shape[1])\n",
        "        })\n",
        "\n",
        "        # Filter out rows with value <= 0\n",
        "        Links = Links.loc[Links.value > 0]\n",
        "\n",
        "        # Add LR pair name\n",
        "        Links['interaction_name'] = pair\n",
        "\n",
        "        # Append to the list\n",
        "        all_links.append(Links)\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"Error processing pair {pair}: {e}\")\n",
        "        continue\n",
        "\n",
        "  # Combine all Links DataFrames into one\n",
        "  if all_links:\n",
        "      combined_links = pd.concat(all_links, ignore_index=True)\n",
        "      path_write_LR = f'/rsrch5/home/biostatistics/lku/ILIBD/data/{num}/spatialdm_result.csv'\n",
        "      combined_links.to_csv(path_write_LR , index=False)\n",
        "      print(f\"Results saved for {num} at {path_write_LR}\")\n",
        "  else:\n",
        "      print(f\"No valid interactions found for {num}. Skipping CSV write.\")"
      ],
      "metadata": {
        "id": "MXzb8CvX2e8i"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}