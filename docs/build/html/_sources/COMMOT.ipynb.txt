{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## **COMMOT Analysis of CCI**"
      ],
      "metadata": {
        "id": "uYXEKG9QHuko"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "*   The COMMOT documentation and package could be found  here: https://commot.readthedocs.io/en/latest\n",
        "*   The paper could be found here: https://doi.org/10.1038/s41592-022-01728-4"
      ],
      "metadata": {
        "id": "Att7wS9DHuh2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1. **Import Package**"
      ],
      "metadata": {
        "id": "a5OUJJ33ICTI"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vY1HCbDOGYtp"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import gc\n",
        "import ot\n",
        "import pickle\n",
        "import anndata\n",
        "import scanpy as sc\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy import sparse\n",
        "from scipy.stats import spearmanr, pearsonr\n",
        "from scipy.spatial import distance_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import commot as ct"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2. **Run the Analysis**\n",
        "\n",
        "*   The below shows an example analysis on analyzing spot level data, where I have prepared the data by the following columns: `[\"x\", \"y\", \"celltypeA\",..., \"celltypeX\", \"cell_type(dominant cell type)\", \"GeneA\",..., \"GeneX\"]`.\n",
        "*   When running the analysis, we use the default settings following their tutorial.\n",
        "*   `ct.tl.cluster_communication_spatial_permutation`: could obtain cell type specific interaction results.\n",
        "*   `ct.tl.spatial_communication`: could obtain the direction pattern of the interaction results."
      ],
      "metadata": {
        "id": "juSrzRiRIIk9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for num in [\"slice1\"]:\n",
        "  path_exprsn = f'/rsrch5/home/biostatistics/lku/ILIBD/data/{num}/exprsn_df.csv'\n",
        "  data = pd.read_csv(path_exprsn, index_col=0)\n",
        "  data = data.dropna(subset=['cell_type'])\n",
        "  data = data.set_index('cell', drop=False)\n",
        "  data.index.name = None\n",
        "  gene_expression= data.drop(columns=[\"x\",\"y\",\"cell\",\"Excitatory_neurons\",\"Inhibitory_neuron\", \"Astrocyte\", \"Oligodendrocyte\",\"Oligodendrocyte_precursor_cell\",\n",
        "                    \"Microglia\",\"Pericytes\", \"Endothelial_cells\",\"cell_type\"])\n",
        "  meta_data = data[[\"x\",\"y\",\"cell_type\",'cell']]\n",
        "  meta_data.set_index('cell', inplace=True)\n",
        "  # Create AnnData object\n",
        "  adata = sc.AnnData(X=gene_expression, obs=meta_data)\n",
        "  adata.obsm['spatial'] = meta_data[['x', 'y']].to_numpy()\n",
        "  adata.var_names_make_unique()\n",
        "  adata.raw = adata\n",
        "  sc.pp.normalize_total(adata, inplace=True)\n",
        "  sc.pp.log1p(adata)\n",
        "  df_cellchat = ct.pp.ligand_receptor_database(species='human', signaling_type='Secreted Signaling', database='CellChat')\n",
        "  df_cellchat_filtered = ct.pp.filter_lr_database(df_cellchat, adata, min_cell_pct=0.05)\n",
        "\n",
        "  adata_dis500 = adata.copy()\n",
        "  ct.tl.spatial_communication(adata_dis500, database_name='cellchat', df_ligrec=df_cellchat_filtered, dis_thr=500, heteromeric=True, pathway_sum=True)\n",
        "\n",
        "  adata_dis500.write( f'/rsrch5/home/biostatistics/lku/ILIBD/data/{num}/commot_dir_adata.h5ad')\n",
        "\n",
        "  ct.tl.cluster_communication_spatial_permutation(adata,\n",
        "                                                  database_name='cellchat',\n",
        "                                                  df_ligrec=df_cellchat_filtered,\n",
        "                                                  dis_thr=500, heteromeric=True,\n",
        "                                                  clustering=\"cell_type\")\n",
        "\n",
        "  adata.write( f'/rsrch5/home/biostatistics/lku/ILIBD/data/{num}/commot_cluster_adata.h5ad')\n",
        "\n",
        "  # Get the keys from adata.uns\n",
        "  uns_keys = list(adata.uns.keys())\n",
        "  # Define the prefix to split the keys\n",
        "  prefix = 'commot_cluster_spatial_permutation-cell_type-cellchat-'\n",
        "  # Initialize empty lists for pathways and LR pairs\n",
        "  pathway_vector = []\n",
        "  lr_pair_vector = []\n",
        "  # Iterate through the keys\n",
        "  for key in uns_keys:\n",
        "    # Exclude non-relevant keys\n",
        "    if key in ['commot_cluster_spatial_permutation-cell_type-cellchat-total-total', 'log1p']:\n",
        "      continue\n",
        "    key_suffix = key.replace(prefix, '')\n",
        "    if '-' in key_suffix:\n",
        "      lr_pair_vector.append(key_suffix)\n",
        "    else:\n",
        "      pathway_vector.append(key_suffix)\n",
        "\n",
        "  # Create an empty list to store the Links DataFrames\n",
        "  LRpair_link = []\n",
        "  for pair in lr_pair_vector:\n",
        "    name = 'commot_cluster_spatial_permutation-cell_type-cellchat-' + pair\n",
        "    #pair = 'commot_cluster_spatial_permutation-celltype-cellchat-ANGPTL'\n",
        "    # Extract the communication matrix and p-value matrix\n",
        "    communication_matrix = adata.uns[name]['communication_matrix']\n",
        "    communication_pvalue = adata.uns[name]['communication_pvalue']\n",
        "\n",
        "    # Convert communication_matrix into a long-form DataFrame\n",
        "    communication_df = communication_matrix.stack().reset_index()\n",
        "    communication_df.columns = ['ligand', 'receptor', 'score']\n",
        "\n",
        "    # Convert communication_pvalue into a long-form DataFrame\n",
        "    pvalue_df = communication_pvalue.stack().reset_index()\n",
        "    pvalue_df.columns = ['ligand', 'receptor', 'pvalue']\n",
        "\n",
        "    # Merge the two DataFrames on ligand and receptor\n",
        "    result_df = pd.merge(communication_df, pvalue_df, on=['ligand', 'receptor'])\n",
        "    result_df['interaction_name'] = pair\n",
        "    # Create the interaction_name column\n",
        "    #result_df['interaction_name'] = result_df['ligand'] + \"_\" + result_df['receptor']\n",
        "\n",
        "    # Reorder columns\n",
        "    result_df = result_df[['ligand', 'receptor', 'score', 'pvalue', 'interaction_name']]\n",
        "\n",
        "    # Append the current Links DataFrame to the list\n",
        "    LRpair_link.append(result_df)\n",
        "\n",
        "  # Combine all Links DataFrames into one\n",
        "  LRpair_df = pd.concat(LRpair_link, ignore_index=True)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  # Create an empty list to store the Links DataFrames\n",
        "  pathway_link = []\n",
        "\n",
        "  for pair in pathway_vector:\n",
        "    name = 'commot_cluster_spatial_permutation-cell_type-cellchat-' + pair\n",
        "    #pair = 'commot_cluster_spatial_permutation-celltype-cellchat-ANGPTL'\n",
        "    # Extract the communication matrix and p-value matrix\n",
        "    communication_matrix = adata.uns[name]['communication_matrix']\n",
        "    communication_pvalue = adata.uns[name]['communication_pvalue']\n",
        "\n",
        "    # Convert communication_matrix into a long-form DataFrame\n",
        "    communication_df = communication_matrix.stack().reset_index()\n",
        "    communication_df.columns = ['ligand', 'receptor', 'score']\n",
        "\n",
        "    # Convert communication_pvalue into a long-form DataFrame\n",
        "    pvalue_df = communication_pvalue.stack().reset_index()\n",
        "    pvalue_df.columns = ['ligand', 'receptor', 'pvalue']\n",
        "\n",
        "    # Merge the two DataFrames on ligand and receptor\n",
        "    result_df = pd.merge(communication_df, pvalue_df, on=['ligand', 'receptor'])\n",
        "    result_df['pathway'] = pair\n",
        "\n",
        "    # Reorder columns\n",
        "    result_df = result_df[['ligand', 'receptor', 'score', 'pvalue', 'pathway']]\n",
        "\n",
        "    # Append the current Links DataFrame to the list\n",
        "    pathway_link.append(result_df)\n",
        "\n",
        "  # Combine all Links DataFrames into one\n",
        "  pathway_df = pd.concat(pathway_link, ignore_index=True)\n",
        "  path_write_path = f'/rsrch5/home/biostatistics/lku/ILIBD/data/{num}/commot_pathway_result.csv'\n",
        "  path_write_LR = f'/rsrch5/home/biostatistics/lku/ILIBD/data/{num}/commot_interaction_result.csv'\n",
        "  pathway_df.to_csv(path_write_path, index=False)\n",
        "  LRpair_df.to_csv(path_write_LR , index=False)\n"
      ],
      "metadata": {
        "id": "Xa3Q6lYYII4P"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}